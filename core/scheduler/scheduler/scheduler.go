package scheduler

import (
	"fmt"
	"time"

	"github.com/MikMuellerDev/smarthome/core/database"
	"github.com/go-co-op/gocron"
	"github.com/sirupsen/logrus"
)

// This scheduler is executed only once, then disabled the job it should run
var scheduler *gocron.Scheduler

var log *logrus.Logger

func InitLogger(logger *logrus.Logger) {
	log = logger
}

// - [x] Add function Receives a homescript string as an input
// - [ ] Add schedule API layer
// - [ ] The homescript string is generated by the API layer
// - [x] Store jobs in the database
// - [x] Start jobs which have not been executed from the database
// - [x] Make a scheduler runner
// - [ ] Make already set up scheduler editable
// - [x] Add database schema
func Init() error {
	scheduler = gocron.NewScheduler(time.Local)
	scheduler.TagsUnique()
	if err := startSavedSchedules(); err != nil {
		return err
	}
	scheduler.StartAsync()
	return nil
}

// Retrieves saved schedules from the database and starts them
func startSavedSchedules() error {
	schedules, err := database.GetSchedules()
	if err != nil {
		log.Error("Failed to start schedules: database failure: ", err.Error())
		return err
	}
	for _, schedule := range schedules {
		// Prepare the job for go-cron
		automationJob := scheduler.Every(1).Day().At(fmt.Sprintf("%02d:%02d", schedule.Hour, schedule.Minute))
		automationJob.Tag(fmt.Sprintf("%d", schedule.Id))
		automationJob.LimitRunsTo(1)
		automationJob.Do(scheduleRunnerFunc, schedule.Id)
		log.Trace(fmt.Sprintf("Successfully setup schedule '%d'", schedule.Id))
	}
	log.Debug("Successfully started saved schedules")
	return nil
}
